# Template to only run if actual changes have been made to the code and not just documentation.
.run-on-code-changes:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "**/*.{glsl,png,rs,ron,ftl,toml,vox,yml,wav,sh}"
        - "rust-toolchain"
        - "Cargo.lock"
        - ".gitlab/CI/*.yml"
        - ".gitlab/scripts/*.sh"
        - ".gitlab-ci.yml"
        - ".cargo/config.toml"
        - ".rustfmt.toml"
        - "clippy.toml"

# Template to only run if pushes to master, schedule or a version tag.
.release:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event" && ( $CI_PIPELINE_SOURCE == "schedule" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || ( $CI_COMMIT_TAG != null && $CI_COMMIT_TAG =~ $TAG_REGEX ) )
      when: on_success
    - when: never
  retry:
    max: 1

# `allow_failure: true` makes these pipelines manual and "non-blocking" which changed with except -> rule syntax.
.optional-release:
  stage: check
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event" || $CI_PIPELINE_SOURCE == "schedule" || ( $CI_COMMIT_TAG != null && $CI_COMMIT_TAG =~ $TAG_REGEX )
      when: never
    - when: manual
      allow_failure: true

# Build templates for Windows, macOS and Linux.
# Windows.
.build-windows-x86_64:
  image: registry.gitlab.com/veloren/veloren-docker-ci/cache/release-windows-x86_64:${CACHE_IMAGE_TAG}
  script:
    - ln -s /dockercache/target target;
    - cat ./.gitlab/scripts/windows-x86_64.sh;
    - source ./.gitlab/scripts/windows-x86_64.sh;
    - cp -r target/x86_64-pc-windows-gnu/release/veloren-server-cli.exe ${CI_PROJECT_DIR};
    - cp -r target/x86_64-pc-windows-gnu/release/veloren-voxygen.exe ${CI_PROJECT_DIR};
    - cp /usr/lib/gcc/x86_64-w64-mingw32/13-posix/libgcc_s_seh-1.dll ${CI_PROJECT_DIR};
    - cp /usr/lib/gcc/x86_64-w64-mingw32/13-posix/libstdc++-6.dll ${CI_PROJECT_DIR};
    - cp /usr/x86_64-w64-mingw32/lib/libwinpthread-1.dll ${CI_PROJECT_DIR};
  artifacts:
    paths:
      - veloren-server-cli.exe
      - veloren-voxygen.exe
      - assets/
      - LICENSE
      - libgcc_s_seh-1.dll
      - libstdc++-6.dll
      - libwinpthread-1.dll
    expire_in: 1 week

# macOS.
# Use a YAML anchor to allow the same before_script to be used in both .build-macos-x86_64 and .build-macos-aarch64.
# https://docs.gitlab.com/ee/ci/yaml/yaml_optimization.html#yaml-anchors-for-scripts
.build-macos-install-script: &build-macos-install-script
  - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y;
  - wget -q https://github.com/Kitware/CMake/releases/download/v3.31.8/cmake-3.31.8-macos-universal.tar.gz;
  - tar -xzf cmake-3.31.8-macos-universal.tar.gz;
  - ls -la cmake-3.31.8-macos-universal/CMake.app/Contents;
  - sudo cp -r cmake-3.31.8-macos-universal/CMake.app/Contents/bin/* /usr/local/bin/;
  - sudo cp -r cmake-3.31.8-macos-universal/CMake.app/Contents/share/* /usr/local/share/;
  - which cmake;
  - cmake --version;

.build-macos-before-script: &build-macos-before-script
  - source ${HOME}/.cargo/env;
  - cargo --version;
  - rustup toolchain list;
  - export DISABLE_GIT_LFS_CHECK=true;
  - export VELOREN_ASSETS="$(pwd)/assets";
  - echo "VELOREN_ASSETS=${VELOREN_ASSETS}";
  - export RUSTFLAGS="-D warnings";
  - export CARGO_INCREMENTAL=0;

.build-macos:
  tags: ["saas-macos-large-m2pro"]
  image: macos-15-xcode-16
  script:
    - export MACOSX_DEPLOYMENT_TARGET="10.13";
    - export VELOREN_USERDATA_STRATEGY=executable;
    - cargo build --profile ${PROFILE} --no-default-features --features default-publish --target ${RUST_TARGET};
    - cp -r target/${RUST_TARGET}/${PROFILE}/veloren-server-cli ${CI_PROJECT_DIR};
    - cp -r target/${RUST_TARGET}/${PROFILE}/veloren-voxygen ${CI_PROJECT_DIR};
  artifacts:
    paths:
      - veloren-server-cli
      - veloren-voxygen
      - assets/
      - LICENSE
    expire_in: 1 week

.build-macos-x86_64:
  extends:
    - .build-macos
  before_script:
    - *build-macos-install-script
    # Using fat LTO on macos_x86_64 caused timeouts in the build pipeline,
    # overriding it to thin here fixes this.
    - export PROFILE="release-thinlto";
    - *build-macos-before-script
    - rustup target add x86_64-apple-darwin;
    - export RUST_TARGET="x86_64-apple-darwin";

.build-macos-aarch64:
  extends:
    - .build-macos
  before_script:
    - *build-macos-install-script
    - export PROFILE="release";
    - *build-macos-before-script
    - rustup target add aarch64-apple-darwin;
    - export RUST_TARGET="aarch64-apple-darwin";

# Linux.
.build-linux-x86_64:
  image: registry.gitlab.com/veloren/veloren-docker-ci/cache/release-linux-x86_64:${CACHE_IMAGE_TAG}
  script:
    - ln -s /dockercache/target target;
    - cat ./.gitlab/scripts/linux-x86_64.sh;
    - source ./.gitlab/scripts/linux-x86_64.sh;
    - cp -r target/release/veloren-server-cli ${CI_PROJECT_DIR};
    - cp -r target/release/veloren-voxygen ${CI_PROJECT_DIR};
  artifacts:
    paths:
      - veloren-server-cli
      - veloren-voxygen
      - assets/
      - LICENSE
    expire_in: 1 week

.build-linux-aarch64:
  image: registry.gitlab.com/veloren/veloren-docker-ci/cache/release-linux-aarch64:${CACHE_IMAGE_TAG}
  script:
    - ln -s /dockercache/target target;
    - cat ./.gitlab/scripts/linux-aarch64.sh;
    - source ./.gitlab/scripts/linux-aarch64.sh;
    - cp -r target/aarch64-unknown-linux-gnu/release/veloren-server-cli ${CI_PROJECT_DIR};
    - cp -r target/aarch64-unknown-linux-gnu/release/veloren-voxygen ${CI_PROJECT_DIR};
  artifacts:
    paths:
      - veloren-server-cli
      - veloren-voxygen
      - assets/
      - LICENSE
    expire_in: 1 week
